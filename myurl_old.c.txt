#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
#include<arpa/inet.h>
#include<openssl/ssl.h>
#include<openssl/err.h>
#include<sys/socket.h>
#include<netdb.h>
#include<unistd.h>
#include<sys/ioctl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<dirent.h>
#include<zlib.h>

//clang -Wall h.c -lcrypto -lssl -lz
//#define h_url "http://127.0.0.1:8080/index.html"
//#define h_url "https://www.baidu.com/index.html"
//#define h_url "https://1978aa52b39f677b58c5c8d8f8ed7312.dlied1.cdntips.net/dlied1.qq.com/qqweb/QQ_1/android_apk/AndroidQQ_8.4.5.4745_537065283.apk"
//#define h_url "https://ma75.gdl.netease.com/Sky_Gold_0.6.2_149571_obt_netease_encrypted_minify.apk"
//#define h_url "http://www.baidu.com/index.html"
//#define h_url "http://issuecdn.baidupcs.com/issue/netdisk/apk/BaiduNetdiskSetup_wap_new.apk"
//#define h_url "http://dl.as.61.com/AvatarStar_Setup_1.4.0.65410.exe"
#define h_url "http://libs.baidu.com/jquery/2.1.4/jquery.min.js"
//#define h_url "https://www.baidu.com/index.html"

/* 这里不支持 openssl 多线程，可以尝试 https://curl.haxx.se/libcurl/c/opensslthreadlock.html */
struct myurl_d{
SSL_CTX *ctx; /* ctx */
char head_t[4][128];
char *headers[5]; /* 默认请求头 */
}myurl_dm={NULL,{"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537(KHTML, like Gecko) Chrome/47.0.2526Safari/537.36","Connection: close","Accept-Encoding: gzip, deflate","Accept: */*"}};
struct myurl_info{
char *url; /* 链接 */
char *pwd; /* 路径(忘记有什么用) */
//char *lu;
char *data; /* post data */
size_t post_len; /* post len */
char **headers; /* 请求头 */
char **extra_headers; /* 额外的请求头 */
int bufsize; /* 缓冲区大小 */
int code; /* 返回code */
char **get_headers; /* 获取响应头 例如{"Content-Type:","Date:",NULL}(用malloc()} */
unsigned int follow:1; /* 重定向 */
size_t (*r)(void *,size_t,size_t,void *); /* post (未完成) */
size_t (*h)(void *,size_t,size_t,void *); /* 写 请求头 */
size_t (*w)(void *,size_t,size_t,void *); /* 写 请求体 */
void *rh; /* r 最后一个参数 */
void *hh; /* h 最后一个参数 */
void *wh; /* w 最后一个参数 */
};
struct myurl_h{
int i;
z_stream *z;
char **headers;
char **extra_headers;
unsigned long long l;
unsigned long long l1;
unsigned long long length;
int s;
SSL_CTX *ctx;
SSL *ssl;
char *search_buf;
char *z_mem;
char *buf;
int search_bufsize;
int search_bufsize2;
unsigned int gzip_y:1;
unsigned int chunked_y:1;
unsigned int http_y:1;
unsigned int follow_y:2;
unsigned int only_get_length:1;
unsigned int extra_y:2;
struct myurl_info *info;
};

void myurl_heada(char ***handle,char *s,int mode){
	//mode: 0 被动(仅增添)  1 主动(增添/更改) 2 搜索 3 删除 4,-1 释放 0,1 + 5 原有基础上排到第一个
	int buf=16;
	char **p;
	char *q;
	char c;
	int n;
	int i=0;
	if(*handle==NULL){*handle=(char **)malloc(buf*sizeof(char *));**handle=NULL;}
	p=*handle;
	if(mode==-1||mode==4){
		//printf("free\n");
		while(*p!=NULL)free(*(p++));
		free(*handle);
		*handle=NULL;
	}else
	while(1){
		//printf("i:%d\n",i);
		if(p[i]==NULL){
			if(mode==2){
				s[0]='\0';
				break;}
			/* 新增 */
			//printf("new: %d\n",i);
			n=strlen(s)+1;
			p[i]=(char *)malloc(n*sizeof(char));
			strcpy(p[i],s);
			/* 判断是否创建新空间 */
			if((++i)%buf==0){
				//printf("new_mem: %d\n",i);
				p=(char **)malloc((i+buf)*sizeof(char **));
				memcpy(p,*handle,i*sizeof(char **));
				free(*handle);
				*handle=p;
	}
			p[i]=NULL;
			//printf("end_i: %d\n",i);
			break;
		}
		n=0;
		q=p[i];
		//printf("g(%d): %s\n",i,q);
		/* 对比 */
		while((c=q[n])==s[n]){
			//printf("here: %c\n",c);
			if(c==':'||c==' '){
				if(mode==0||mode==5||mode==3){n=-1;break;}
				if(mode==2){
					/*查找*/
					strcpy(s,p[i]);
					n=-1;
					break;
				}

				/* 覆盖 */
				n=strlen(s)+1;
				p[i]=(char *)malloc(n*sizeof(char));
				strcpy(p[i],s);
				free(p[i]);
				//printf("free\n");
				n=-1;
				break;
			}
			n++;
		}
		if(n==-1)break;
		i++;
	}
	//printf("break;\n");
	if(mode==5||mode==6||mode==3){
		if(p[i]==NULL)i--;
		if(mode==3) { /* 移出第i个 */
			if(p[i]!=NULL){
				free(p[i]);
				while(p[i]!=NULL){
					p[i]=p[1+i];
					i++;
				}
			}
		} else /* 找到、更改或新增并提到第一个 */ while(i>0){q=p[i];p[i]=p[i-1];p[--i]=q;}
	}
}
int myurl_link(char u[],int *s,SSL **ssl,SSL_CTX **ctx,char *host,char *a){
/* ipv4 */
//printf("u: %s\n",u);
unsigned long port=0;
struct hostent *ho;
struct sockaddr_in h;
char *m;
unsigned long i=0;
unsigned long n=strlen(u);
memset(&h, 0, sizeof(h));
if((m=strstr(u,"//"))){
m+=2;
for(i=0;i<n;i++){
if(m[i]=='/'){
host[i]='\0';
m+=i;
strcpy(a,m);
break;}
host[i]=m[i];
}
}else{return -1;}
if((m=strchr(host,':'))!=NULL){
*(m++)='\0';
sscanf(m,"%lu",&i);
//if(i!=80/* &&m!=443 */)n=2;
n=2;
port=htons(i);}
m=host;
while((i=*m)!='\0'){
if((i<='0'||i>='9')&&i!='.'){i=1;break;}
m++;
}
if(i==0){
h.sin_addr.s_addr=inet_addr(host);
}else{
ho=gethostbyname(host);
if(ho==NULL)return -1;
h.sin_addr.s_addr=*((unsigned long *)ho->h_addr);
}
if(n==2){host[strlen(host)]=':';}
if(strstr(u,"http://")!=NULL){if(port==0)port=htons(80);n=0;}else
if(strstr(u,"https://")!=NULL){if(port==0)port=htons(443);n=1;}
//printf("host: %s\na: %s\naddr:%u\nport:%lu\ni:%lu\n",host,a,h.sin_addr.s_addr,port,i);
if((*s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))==-1){return -1;}
h.sin_family = AF_INET; /* Internet地址族 */
h.sin_port = port; /* 端口号 */
//h.sin_addr.s_addr = addr; / * 地址 * /
if(connect(*s, (struct sockaddr*)&h, sizeof(struct sockaddr))==-1)return -1;
if(n==1){ /* https */
if(*ctx==NULL)
*ctx=SSL_CTX_new(SSLv23_client_method());
*ssl=SSL_new(*ctx);
if(ssl==NULL){return -1;}
if(SSL_set_fd(*ssl,*s)<0)ERR_print_errors_fp(stdout);
if(SSL_connect(*ssl)<0){return -1;}}else{*ssl=NULL;}
return (int)n;
}
/* int myurl_hh(){
* 然并卵 
* return 0;
* } */
int myurl_st_init(struct myurl_h *h){
extern struct myurl_d myurl_dm;
if(!myurl_dm.ctx){
if(myurl_dm.headers[0]==NULL){
for(int i=0;i<4;i++)myurl_dm.headers[i]=myurl_dm.head_t[i];
myurl_dm.headers[4]=NULL;
}
if(h->info->bufsize==0)h->info->bufsize=1024;
SSL_library_init();
OpenSSL_add_all_algorithms();
SSL_load_error_strings();
myurl_dm.ctx=SSL_CTX_new(SSLv23_client_method());
if(!myurl_dm.ctx){ERR_print_errors_fp(stdout);return -1;}
}
if(!h->ctx)h->ctx=myurl_dm.ctx;
if((h->headers=h->info->headers)==NULL){h->headers=(char **)&myurl_dm.headers;
}
return 0;
}
int myurl_free(struct myurl_h *h){
/* free */
if(h->z_mem){inflateEnd(h->z);free(h->z_mem);}
if(h->buf){free(h->buf);h->buf=NULL;}
if(h->ssl!=NULL){SSL_shutdown(h->ssl);
SSL_free(h->ssl);}
if(h->s>0)close(h->s);
//if(h.th)pthread_deacth(h.th);
return -1;
}
char *myurl_heada_search(char **a,char **b,char *n){
char c=*n;
myurl_heada(&a,n,2);
if(*n=='\0'&&b){
*n=c;
myurl_heada(&b,n,2);
}
return n;
}
ssize_t myurl_write(int s,SSL *ssl,char *buf,size_t i){
if(ssl==NULL)return write(s,buf,i);else return SSL_write(ssl,buf,i);
}
int myurl_base_search(size_t a,size_t b,size_t bufsize,char *buf,char *y,char *z){
// int myurl_base_search(开始,结束,缓冲区尺寸,缓冲区,搜索项,输出);
char *e,*m;
//bufsize--;
m=buf+a;
if(a>b) e=buf+bufsize; else e=buf+b+1;
while(1){
//while(*(m++)==*(y++))
//printf("(%c)",*m);
if(y!=NULL){if(*(m++)!=*(y++))break;}
else if((*(z++)=*(m++))=='\0')break;
if(m==e){
if(e==buf+bufsize) /* a!=0 */ {m=buf;e=buf+b+1;} else break; /* a */
}}
if(!y){
*(z-1)='\0';
}else if(*(y-1)=='\0'){
if(z&&y){
myurl_base_search(a,b,bufsize,buf,NULL,z);
}
}else return -1; /* 失败 */
return 0; /* 成功 */
}
int myurl_search(size_t a,size_t b,size_t c,char *d,struct myurl_h *h){
size_t size;
char *m;
char **p;
if((p=h->info->get_headers)!=NULL)
for(;*p!=NULL;p++)myurl_base_search(a,b,c,d,*p,*p);
size=(a>b)?c-a+b:b-a;
if(size+3>h->search_bufsize){ /* 预留 */
if(h->search_buf)free(h->search_buf);
h->search_bufsize=size+h->search_bufsize2;
h->search_buf=(char *)malloc(h->search_bufsize*sizeof(char));
}
m=h->search_buf;
if(!h->http_y){
if((h->http_y=myurl_base_search(a,b,c,d,"HTTP/",m)+1)==1){sscanf(m,"%*s %d",&h->info->code);
if(h->info->code>299&&h->info->code<400&&h->info->follow) /* 30x */ h->follow_y=1;
}
}else if(h->length==0){
if(myurl_base_search(a,b,c,d,"Content-Length:",m)==0)sscanf(m,"%*s %llu",&h->length);
}
if(h->follow_y==1){
if(myurl_base_search(a,b,c,d,"Location:",m)==0){
m=h->info->url;
size=strstr(m,"//")-m+2;
while(m[size++]!='/');
h->info->url=(char *)malloc((size+strlen(h->search_buf))*sizeof(char));
strncpy(h->info->url,m,size);
h->info->url[size]='\0';
if(h->info->follow>1)free(m);
h->info->follow++;
m=1+strchr(h->search_buf,':');
if(*m==' ')m++;
m[strlen(m)-2]='\0';
//printf("%s\n",m);
if(*m=='/'){
strcat(h->info->url,m);
}else strcpy(h->info->url,m);
h->follow_y=2;
}
}
if(!h->gzip_y){
h->gzip_y=myurl_base_search(a,b,c,d,"Content-Encoding: gzip",NULL)+1;
}
if(!h->chunked_y){
h->chunked_y=myurl_base_search(a,b,c,d,"Transfer-Encoding: chunked",m)+1;
}
return 0;
}
size_t myurl_w_void(void *buf,size_t a,size_t b,void *p){
//printf("w: %s\n",(char *)buf);
(void)p;
(void)buf;
//printf("%zd %zd\n",a,b);
return a*b;
}
int myurl_main(struct myurl_info *info){
struct myurl_h h;
z_stream z;
int status;
char *buf;
char b[4];
int bufsize;
size_t y;
size_t p;
size_t i;
char c;
char d;
char *m;
char *n;
int u;
char *e;
char **headers;
memset(&h,'\0',sizeof(struct myurl_h));
h.search_bufsize2=128;
h.z=&z;
h.info=info;
//printf("u: %s\n",info->url);
myurl_st_init(&h); /* init info */
bufsize=(info->bufsize==0)?4096:info->bufsize; /* 4k 8k(0x8000)*/
//h.ssl=NULL;
buf=(char *)malloc(sizeof(char)*bufsize);
h.buf=buf;
//*buf='\0';
if(info->data&&!info->post_len)info->post_len=strlen(info->data);
if(info->post_len){strcpy(buf,"POST ");} else strcpy(buf,"GET ");
p=strlen(info->url)+64;
n=buf+p;
m=n+8;
//h.ctx=NULL;
if(myurl_link(info->url,&h.s,&h.ssl,&h.ctx,m,buf+strlen(buf))==-1)return myurl_free(&h);
strcat(buf," HTTP/1.1\r\n");
//printf("\nbuf: %s\nm: %s\n/* ********* */\n",buf,m);

/* 测试
printf("m: %s\n",m);
sprintf(buf+strlen(buf),"Host: %s\r\n"\
"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537(KHTML, like Gecko) Chrome/47.0.2526Safari/537.36\r\n"\
"Connection: close\r\n"\
"Accept-Encoding: gzip, deflate\r\n"\
"Accept: *\/\*\r\n\r\n"\
,m);
//printf("%s",buf);
myurl_write(h.s,h.ssl,buf,strlen(buf));*/
strcpy(n,"Host: ");
//printf("head\n");
if(*myurl_heada_search(h.headers,info->extra_headers,n)=='\0'){sprintf(buf+strlen(buf),"Host: %s\r\n",m);}
//m=n=NULL;
i=strlen(buf);
headers=h.headers;
// i y p
//y=(size_t)bufsize;
d=0;
strcpy(b,"\r\n");
e=b;
while(*e!='\0')e++;// while(*(++e)!='\0');
n=(char *)b;
while(1){
if((m=*headers)==NULL){
if(d==0){
if(info->extra_headers)headers=info->headers;else d++;}
if(d==1){d=3;if(info->post_len==0)d--;}
if(d==3||d==4){
if(bufsize-i<256){c='C';continue;}else{
m=buf+i;
if(d==3)strcpy(m,"Content-Length: ");
if(d==4)strcpy(m,"Content-Type: ");
if(*myurl_heada_search(h.headers,info->extra_headers,m)=='\0'){
if(d==3){sprintf(m,"Content-Length: %zd",info->post_len);}else if(d==4)strcpy(m,"Content-Type: application/x-www-form-urlencoded");}
}
i+=strlen(m);m=(char *)b;
}
if(d==6){c='C';m=e;}//clear buf
if(d==2||d==5){d=5;m=(char *)b;} // \r\n
//printf("d %hhd\n",d);
if(d==7)break;d++;}
//printf("%hhd %s\n",d,buf+strlen(buf)-10);
if(c=='C'){c='\0';myurl_write(h.s,h.ssl,buf,i);i=0;}else
while(1){
// 将m复制到buf并加合并n e为end指针 
if((buf[i++]=*(m++))=='\0'){i--;if(--m==e)break;m=n;}
if(i>=bufsize){
//printf("%s",buf);
myurl_write(h.s,h.ssl,buf,i);
i=0;
}
}
if(*headers)headers=&headers[1]; // 这里应该是headers++
}

if(info->post_len){
printf("post_len:%zd\n",info->post_len);
m=info->data;
while(info->post_len!=0){
i=(info->post_len<bufsize)?info->post_len:bufsize;
if(m){
n=m;
}else{
i=info->r(buf,1/* sizeof(char) */,i,info->rh);
printf("b: %s\n",buf);
n=buf;
}
myurl_write(h.s,h.ssl,n,i);
if(m)m-=i;
info->post_len-=i;
}
}
/* 响应头 */
//printf("response\n");
i=y=0;
m=buf;
while(1){
if(h.ssl==NULL)read(h.s,&c,1);else SSL_read(h.ssl,&c,1);
*(m++)=c;
i++;
if(i==bufsize){
m=buf;
if(info->h){info->h(buf,1/* sizeof(char) */,i,info->hh);}
i=0;
}
if(c=='\n'||c=='\r'){
d++;if(d==2){myurl_search(y,i,bufsize,buf,&h);y=i;}if(d==4)break;}else d=0;
}
if(info->h){info->h(buf,1/* sizeof(char) */,i,info->hh);}
free(h.search_buf);
if(h.follow_y==2){
myurl_free(&h);
return myurl_main(info);
}
if(info->follow>1)free(info->url);

/*
printf("code: %d\n",info->code);
printf("Length: %lld\n",h.length);
*/
/*
printf("gzip_y: %d\n",h.gzip_y);
printf("chunked_y: %d\n",h.chunked_y);
*/
/* 响应体 */
//return myurl_free(&h);
h.l=0;
u=h.chunked_y-1;
i=0; /* y(bufsize2) */
h.z_mem=NULL;
//info->w=&myurl_w_print;
if(!info->w)info->w=(void *)&myurl_w_void;
//info->wh=(void *)stdout;
if(h.gzip_y){
memset(&z,'\0',sizeof(z_stream));
z.zalloc = Z_NULL;
z.zfree = Z_NULL;
z.opaque = Z_NULL;
if(inflateInit2(&z,MAX_WBITS+16/* 47 */)==Z_OK){
h.z_mem=(char *)malloc(bufsize*sizeof(char));
};
//z.next_in=(Bytef *)buf;
//z.next_out=(Bytef *)h.z_mem;
}
while(h.l<h.length||u!=-1){
y=bufsize;
/* chunk */
if(u!=-1){
if(u==0){
i=0;
d=0;
while(1){
if(h.ssl)SSL_read(h.ssl,&c,1);else read(h.s,&c,1);
buf[i++]=c;
if(c=='\n'||c=='\r'){
/* printf("%s\n",(c=='\r')?"\\r":"\\n"); */
d++;
if(d==1)continue;
//i>=2
if(*buf=='\r'){i=0;continue;} // \r\n%x  %x
if(*buf=='0'&&d!=4)continue;// \r\n0\r\n\r\n
break;
}else/* printf("%c\n",c); */d=0;
}
sscanf(buf,"%x",&u);
}
if(u==0){u=-2;y=0;}else if(u>bufsize)y=bufsize; else y=u;
}else{
if(h.l+y>h.length)y=h.length-h.l;
}
/* read */
if(h.ssl)y=SSL_read(h.ssl,buf,y);else y=read(h.s,buf,y);
//printf("y: %zd\n",y);
/* chunked */
if(u!=-1){
u-=y;
//printf("u: %d\n",u);
}else{h.l+=y;}
/* gzip */
if(h.z_mem){
z.avail_in=y;
z.next_in=(Bytef *)buf;
do{
z.avail_out=bufsize;
z.next_out=(Bytef *)h.z_mem;    
status=inflate(&z, Z_NO_FLUSH);
switch(status){
case Z_STREAM_END:
case Z_OK:
case Z_BUF_ERROR:
case Z_DATA_ERROR:
break;
default:
return myurl_free(&h);
break;
}
y=bufsize-z.avail_out;
while(y!=0)y-=info->w(h.z_mem,1/* sizeof(unsigned char) */,y,info->wh);
}while(z.avail_out==0);
//if(status==Z_STREAM_END)break;
}else{
while(y!=0){y-=info->w(buf,1/* sizeof(char) */,y,info->wh);}
//printf("%lld %lld\n",h.l,h.length);
}
if(u==-2)break;
}
myurl_free(&h);
return 0;
}
int myurl_url(char *a){
size_t len=strlen(a);
char *b;
len=strlen(a)+1;
b=(char *)malloc(len*sizeof(char));
strcpy(b,a);
struct myurl_info t;
memset(&t,'\0',sizeof(struct myurl_info));
t.url=b;
/*
t.w=(void *)&fwrite;
t.wh=(void *)fopen("/storage/emulated/0/home/work/down/a.txt","w+");
*/
//t.bufsize=1024;
t.follow=1;
/* post
strcpy(b,"https://www.runoob.com/try/ajax/demo_post2.php");
t.data="fname=Henry&lname=Ford"; */
//strcpy(b,"http://www.baidu.com/index.html");

/*
t.h=(void *)&fwrite;
t.hh=(void *)stdout;*/
t.w=(void *)&fwrite;
t.wh=(void *)stdout;

myurl_main(&t);
//for(int i=0;i<500;i++){printf("No.%d\n",i);myurl_main(&t);}
//printf("%s\n",b);
//sleep(1);
free(b);
//fclose((FILE *)t.wh);
//sleep(3);
return 0;
}
/*int myurl_pth_down(char *fn,struct myurl_info *info,int line,int mode){
// 多线程下载文件(未完成)
// 文件名 复制用结构体 线程数 线程模式
struct myurl_info *h;
unsigned long long length;
#define w_buf 1024
int i;
int size;
FILE *foo;
char head[128];
char blank[w_buf]
char *headers[2];
if(mode!=1)return -1;//仅有 mode 1
headers[0]=head;
headers[1]=NULL;
info->t=1; // 非阻塞 (线程)
info->w=(void *)&fwrite;
info->extra_free=(void *)fclose;
//info->extra_close_h=(void *);
h=(struct myurl_info *)malloc(line*sizeof(struct myurl_info));
for(i=0;i<line;i++)memcpy(&h[i],info,sizeof(struct myurl_info));
h->length=1;
h->t=0; // 阻塞 
myurl_main(h); // get content-length
length=h.length:
h->t=0;
size=length/line;
memset(blank,'\0',w_buf);
foo=fopen(fn,"w");
for(i=0;i<line;i++){
if(size>length)size=length;
h[i].wh=h[i].extra_free_h=fopen(fn,"ab+");
myurl_main(&h[i]);
if(i==line-1)break;
for(int b=w_buf,u=size;u!=0;){if(u<b)b=u;u-=b;fwrite(blank,sizeof(char),b,foo);} // 填充文件
}
for(i=0;i<line;i++)h[i].th_strat=1;
for(i=0;i<line;i++)pthread_join(h[i].th);
return 0;
}*/
int main(int argc,char **argv){
printf("hello, world!\n");
char *url;
if(argc>1)url=argv[1];else url=h_url;
myurl_url(url);
return 0;
}
